 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace BrightstarDB.Gedcom 
{
    public partial class GedComContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static GedComContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Gedcom.IBirthEvent));
    		TypeMappings.AddImplMapping<BrightstarDB.Gedcom.IBirthEvent, BrightstarDB.Gedcom.BirthEvent>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Gedcom.IDeathEvent));
    		TypeMappings.AddImplMapping<BrightstarDB.Gedcom.IDeathEvent, BrightstarDB.Gedcom.DeathEvent>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Gedcom.IFamily));
    		TypeMappings.AddImplMapping<BrightstarDB.Gedcom.IFamily, BrightstarDB.Gedcom.Family>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Gedcom.IIndividual));
    		TypeMappings.AddImplMapping<BrightstarDB.Gedcom.IIndividual, BrightstarDB.Gedcom.Individual>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Gedcom.IMarriageEvent));
    		TypeMappings.AddImplMapping<BrightstarDB.Gedcom.IMarriageEvent, BrightstarDB.Gedcom.MarriageEvent>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the Brightstar Data Object Store that will provide the entity objects</param>
    	public GedComContext(IDataObjectStore dataObjectStore) : base(TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
    	public GedComContext(string connectionString, bool? enableOptimisticLocking=null) : base(TypeMappings, connectionString, enableOptimisticLocking)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public GedComContext() : base(TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		BirthEvents = 	new BrightstarEntitySet<BrightstarDB.Gedcom.IBirthEvent>(this);
    		DeathEvents = 	new BrightstarEntitySet<BrightstarDB.Gedcom.IDeathEvent>(this);
    		Families = 	new BrightstarEntitySet<BrightstarDB.Gedcom.IFamily>(this);
    		Individuals = 	new BrightstarEntitySet<BrightstarDB.Gedcom.IIndividual>(this);
    		MarriageEvents = 	new BrightstarEntitySet<BrightstarDB.Gedcom.IMarriageEvent>(this);
    	}
    	
    	public IEntitySet<BrightstarDB.Gedcom.IBirthEvent> BirthEvents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Gedcom.IDeathEvent> DeathEvents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Gedcom.IFamily> Families
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Gedcom.IIndividual> Individuals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Gedcom.IMarriageEvent> MarriageEvents
    	{
    		get; private set;
    	}
    	
    }
}
namespace BrightstarDB.Gedcom 
{
    public partial class BirthEvent : BrightstarEntityObject, IBirthEvent 
    {
    	public BirthEvent(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public BirthEvent() : base() { }
    	#region Implementation of BrightstarDB.Gedcom.IBirthEvent
    
    	public System.String Place
    	{
            		get { return GetRelatedProperty<System.String>("Place"); }
            		set { SetRelatedProperty("Place", value); }
    	}
    
    	public System.String Date
    	{
            		get { return GetRelatedProperty<System.String>("Date"); }
            		set { SetRelatedProperty("Date", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Gedcom 
{
    public partial class DeathEvent : BrightstarEntityObject, IDeathEvent 
    {
    	public DeathEvent(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public DeathEvent() : base() { }
    	#region Implementation of BrightstarDB.Gedcom.IDeathEvent
    
    	public System.String Place
    	{
            		get { return GetRelatedProperty<System.String>("Place"); }
            		set { SetRelatedProperty("Place", value); }
    	}
    
    	public System.String Date
    	{
            		get { return GetRelatedProperty<System.String>("Date"); }
            		set { SetRelatedProperty("Date", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Gedcom 
{
    public partial class Family : BrightstarEntityObject, IFamily 
    {
    	public Family(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Family() : base() { }
    	#region Implementation of BrightstarDB.Gedcom.IFamily
    
    	public BrightstarDB.Gedcom.IMarriageEvent MarriageEvent
    	{
            get { return GetRelatedObject<BrightstarDB.Gedcom.IMarriageEvent>("MarriageEvent"); }
            set { SetRelatedObject<BrightstarDB.Gedcom.IMarriageEvent>("MarriageEvent", value); }
    	}
    
    	public BrightstarDB.Gedcom.IIndividual Husband
    	{
            get { return GetRelatedObject<BrightstarDB.Gedcom.IIndividual>("Husband"); }
            set { SetRelatedObject<BrightstarDB.Gedcom.IIndividual>("Husband", value); }
    	}
    
    	public BrightstarDB.Gedcom.IIndividual Wife
    	{
            get { return GetRelatedObject<BrightstarDB.Gedcom.IIndividual>("Wife"); }
            set { SetRelatedObject<BrightstarDB.Gedcom.IIndividual>("Wife", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Gedcom.IIndividual> Children
    	{
    		get { return GetRelatedObjects<BrightstarDB.Gedcom.IIndividual>("Children"); }
    		set { SetRelatedObjects("Children", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Gedcom 
{
    public partial class Individual : BrightstarEntityObject, IIndividual 
    {
    	public Individual(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Individual() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Gedcom.IIndividual
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String Sex
    	{
            		get { return GetRelatedProperty<System.String>("Sex"); }
            		set { SetRelatedProperty("Sex", value); }
    	}
    
    	public BrightstarDB.Gedcom.IBirthEvent BirthEvent
    	{
            get { return GetRelatedObject<BrightstarDB.Gedcom.IBirthEvent>("BirthEvent"); }
            set { SetRelatedObject<BrightstarDB.Gedcom.IBirthEvent>("BirthEvent", value); }
    	}
    
    	public BrightstarDB.Gedcom.IDeathEvent DeathEvent
    	{
            get { return GetRelatedObject<BrightstarDB.Gedcom.IDeathEvent>("DeathEvent"); }
            set { SetRelatedObject<BrightstarDB.Gedcom.IDeathEvent>("DeathEvent", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Gedcom 
{
    public partial class MarriageEvent : BrightstarEntityObject, IMarriageEvent 
    {
    	public MarriageEvent(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public MarriageEvent() : base() { }
    	#region Implementation of BrightstarDB.Gedcom.IMarriageEvent
    
    	public System.String Place
    	{
            		get { return GetRelatedProperty<System.String>("Place"); }
            		set { SetRelatedProperty("Place", value); }
    	}
    
    	public System.String Date
    	{
            		get { return GetRelatedProperty<System.String>("Date"); }
            		set { SetRelatedProperty("Date", value); }
    	}
    	#endregion
    }
}
